generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model userprofile {
  profile_id        Int       @id @default(autoincrement())
  user_id           Int       @unique
  first_name        String    @db.VarChar(100)
  last_name         String    @db.VarChar(100)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @db.Timestamptz(6)
  exercise_duration String    @db.VarChar(255)
  history           String[]
  User              User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  user_id               Int                     @id @default(autoincrement())
  username              String                  @unique @db.VarChar(50)
  email                 String                  @unique @db.VarChar(255)
  password              String                  @db.Char(60)
  is_verified           Boolean?                @default(false)
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?               @db.Timestamptz(6)
  mission               mission[]
  sessions              sessions[]
  usermissioncompletion usermissioncompletion[]
  userprofile           userprofile?
}

model mission {
  mission_id            Int                     @id @default(autoincrement())
  creator_id            Int
  category_id           String                  @db.VarChar(20)
  mission_text          String                  @unique @db.VarChar(150)
  visibility            visibility
  is_community          Boolean?                @default(false)
  timespan              Int
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  missioncategory       missioncategory         @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction)
  User                  User                    @relation(fields: [creator_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  usermissioncompletion usermissioncompletion[]
}

model missioncategory {
  category_id String    @id @db.VarChar(20)
  description String?
  mission     mission[]
}

model sessions {
  session_id   Int       @id @default(autoincrement())
  user_id      Int
  access_token String?   @db.VarChar(255)
  is_active    Boolean?  @default(true)
  login_at     DateTime? @default(now()) @db.Timestamptz(6)
  logout_at    DateTime? @db.Timestamptz(6)
  User         User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model usermissioncompletion {
  missioncompletion_id Int       @id @default(autoincrement())
  user_id              Int
  mission_id           Int
  completed            Boolean?  @default(false)
  started_at           DateTime? @default(now()) @db.Timestamptz(6)
  ended_at             DateTime? @db.Timestamptz(6)
  mission              mission   @relation(fields: [mission_id], references: [mission_id], onDelete: Cascade, onUpdate: NoAction)
  User                 User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

enum visibility {
  private
  public
  restricted
}
